import random
import json

class Minesweeper:
    def __init__(self, size=9, mines=10):
        self.size = size  # –†–∞–∑–º–µ—Ä –ø–æ–ª—è (9x9)
        self.mines = mines  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω
        self.board = [[' ' for _ in range(size)] for _ in range(size)]
        self.revealed = [[False for _ in range(size)] for _ in range(size)]
        self.flags = [[False for _ in range(size)] for _ in range(size)]
        self.game_over = False
        self.initialize_board()

    def initialize_board(self):
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        mines_placed = 0
        while mines_placed < self.mines:
            x = random.randint(0, self.size - 1)
            y = random.randint(0, self.size - 1)
            if self.board[x][y] != 'M':
                self.board[x][y] = 'M'
                mines_placed += 1

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —á–∏—Å–ª–∞ –≤–æ–∫—Ä—É–≥ –º–∏–Ω
        for x in range(self.size):
            for y in range(self.size):
                if self.board[x][y] != 'M':
                    count = self.count_mines(x, y)
                    self.board[x][y] = str(count) if count > 0 else ' '

    def count_mines(self, x, y):
        """–ü–æ–¥—Å—á—ë—Ç –º–∏–Ω –≤–æ–∫—Ä—É–≥ –∫–ª–µ—Ç–∫–∏ (x, y)"""
        count = 0
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                if dx == 0 and dy == 0:
                    continue
                nx, ny = x + dx, y + dy
                if 0 <= nx < self.size and 0 <= ny < self.size:
                    if self.board[nx][ny] == 'M':
                        count += 1
        return count

    def print_board(self, reveal=False):
        # –í—ã–≤–æ–¥ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        print("   " + " ".join([str(i) for i in range(self.size)]))
        print("  +" + "--" * self.size + "+")
        for idx, row in enumerate(self.board):
            display_row = []
            for jdx, cell in enumerate(row):
                if reveal:
                    display_row.append(cell)
                elif self.revealed[idx][jdx]:
                    display_row.append(cell)
                elif self.flags[idx][jdx]:
                    display_row.append('F')
                else:
                    display_row.append('.')
            print(f"{idx} |" + " ".join(display_row) + "|")
        print("  +" + "--" * self.size + "+")
        print(f"–§–ª–∞–∂–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {self.mines - self.count_flags()}")

    def reveal_cell(self, x, y):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—É—Å—Ç—ã—Ö —Å–æ—Å–µ–¥–µ–π"""
        if not (0 <= x < self.size and 0 <= y < self.size):
            return  # –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if self.revealed[x][y] or self.flags[x][y]:
            return  # –£–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ –ø–æ–º–µ—á–µ–Ω–∞ —Ñ–ª–∞–∂–∫–æ–º

        self.revealed[x][y] = True

        if self.board[x][y] == 'M':
            self.game_over = True
            print("–ë—É–º! –í—ã –ø–æ–¥–æ—Ä–≤–∞–ª–∏—Å—å –Ω–∞ –º–∏–Ω–µ! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
            self.print_board(reveal=True)
            return

        if self.board[x][y] == ' ':
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
            for dx in [-1, 0, 1]:
                for dy in [-1, 0, 1]:
                    if dx != 0 or dy != 0:
                        self.reveal_cell(x + dx, y + dy)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
        if self.check_win():
            self.game_over = True
            print("üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
            self.print_board(reveal=True)

    def toggle_flag(self, x, y):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–ª–∏ —Å–Ω—è—Ç–∏–µ —Ñ–ª–∞–∂–∫–∞"""
        if not (0 <= x < self.size and 0 <= y < self.size):
            return
        if self.revealed[x][y]:
            return  # –ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–∂–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–ª–µ—Ç–∫—É
        self.flags[x][y] = not self.flags[x][y]

    def count_flags(self):
        """–ü–æ–¥—Å—á—ë—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–ª–∞–∂–∫–æ–≤"""
        return sum(sum(1 for cell in row if cell) for row in self.flags)

    def check_win(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫"""
        for x in range(self.size):
            for y in range(self.size):
                if self.board[x][y] != 'M' and not self.revealed[x][y]:
                    return False
        return True

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
    def save_game(self, filename="save.json"):
        state = {
            "size": self.size,
            "mines": self.mines,
            "board": self.board,
            "revealed": self.revealed,
            "flags": self.flags,
            "game_over": self.game_over,
        }
        with open(filename, "w") as f:
            json.dump(state, f)
        print(f"–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
    def load_game(self, filename="save.json"):
        try:
            with open(filename, "r") as f:
                state = json.load(f)
            self.size = state["size"]
            self.mines = state["mines"]
            self.board = state["board"]
            self.revealed = state["revealed"]
            self.flags = state["flags"]
            self.game_over = state["game_over"]
            print(f"–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {filename}")
        except FileNotFoundError:
            print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


if __name__ == "__main__":
    print("=== –°–ê–ü–Å–† ===")
    choice = input("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∏–≥—Ä—É? (y/n): ").lower()
    if choice == "y":
        game = Minesweeper()
        game.load_game()
    else:
        game = Minesweeper(size=9, mines=10)

    game.print_board()

    while not game.game_over:
        try:
            action = input("–•–æ–¥ (r x y - –æ—Ç–∫—Ä—ã—Ç—å, f x y - —Ñ–ª–∞–≥, s - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, q - –≤—ã–π—Ç–∏): ").split()
            if not action:
                continue
            cmd = action[0]

            if cmd == 'r' and len(action) == 3:
                x, y = int(action[1]), int(action[2])
                game.reveal_cell(x, y)
            elif cmd == 'f' and len(action) == 3:
                x, y = int(action[1]), int(action[2])
                game.toggle_flag(x, y)
            elif cmd == 's':
                game.save_game()
            elif cmd == 'q':
                print("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã.")
                break
            else:
                print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

            if not game.game_over:
                game.print_board()

        except ValueError:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")